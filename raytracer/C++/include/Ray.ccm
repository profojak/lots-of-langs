module;

#include <iostream>
#include <iomanip>

export module Ray;

import Vector;

export using Vector3f = math::Vector<float, 3>;

export namespace ray {

/*! @brief Ray class. */
class Ray {
private:
    /*! @brief Origin. */
    Vector3f origin;
    /*! @brief Direction. */
    Vector3f direction;

public:
    /*! @brief Default constructor. */
    Ray() noexcept = default;

    /*! @brief Copy constructor. */
    Ray(const Ray&) noexcept = default;

    /*! @brief Move constructor. */
    Ray(Ray&&) noexcept = default;

    /*! @brief Copy constructor that accepts vectors. */
    explicit Ray(const Vector3f& origin, const Vector3f& direction) noexcept :
        origin{origin}, direction{direction} {}

    /*! @brief Move constructor that accepts vectors. */
    explicit Ray(Vector3f&& origin, Vector3f&& direction) noexcept :
        origin{std::move(origin)}, direction{std::move(direction)} {}

    /*! @brief Copy assignment operator. */
    inline Ray& operator=(const Ray&) noexcept = default;

    /*! @brief Move assignment operator. */
    inline Ray& operator=(Ray&&) noexcept = default;

    /*! @brief Get origin. */
    inline auto Origin() const noexcept { return origin; }

    /*! @brief Get direction. */
    inline auto Direction() const noexcept { return direction; }

    /**
     * @brief Get point at given distance along ray.
     * @tparam U Type of distance number.
     * @param distance Distance along ray.
     * @return Point at specified distance along ray.
     */
    template<math::Arithmetic U>
    inline auto PointAt(const U distance) const noexcept {
        return origin + direction * distance;
    }

    /*! @brief Output stream << operator. */
    friend std::ostream& operator<<(std::ostream& out, const Ray& ray) {
        return out << ray.origin << " -> " << ray.direction;
    }
};

/*! @brief Interval class. */
class Interval {
private:
    /*! @brief Minimum distance. */
    float min;
    /*! @brief Maximum distance. */
    float max;

public:
    /*! @brief Default constructor. */
    Interval() noexcept = default;

    /*! @brief Copy constructor. */
    Interval(const Interval&) noexcept = default;

    /*! @brief Move constructor. */
    Interval(Interval&&) noexcept = default;

    /**
     * @brief Construct interval with given minimum and maximum values.
     * @param min Minimum.
     * @param max Maximum.
     */
    explicit Interval(const float min, const float max) noexcept : min{min},
        max{max} {}

    /*! @brief Get minimum value. */
    inline auto Min() const noexcept { return min; }

    /*! @brief Get maximum value. */
    inline auto Max() const noexcept { return max; }

    /*! @brief Get size of interval. */
    inline auto Size() const noexcept {
        return max - min;
    }

    /**
     * @brief Check if interval contains value.
     * @param value Value to check.
     * @return True if interval contains value, false otherwise.
     */
    inline auto Contains(const float value) const noexcept {
        return min <= value && value <= max;
    }

    /**
     * @brief Check if interval surrounds value.
     * @param value Value to check.
     * @return True if interval surrounds value, false otherwise.
     */
    inline auto Surrounds(const float value) const noexcept {
        return min < value && value < max;
    }

    /**
     * @brief Clamp value to interval.
     * @param value Value to clamp.
     * @return Clamped value.
     */
    inline auto Clamp(const float value) const noexcept {
        if(value < min)
            return min;
        if(value > max)
            return max;
        return value;
    }

    /*! @brief Output stream << operator. */
    friend std::ostream& operator<<(std::ostream& out,
        const Interval& interval) {
        out << '[' << std::setw(10) << std::setprecision(4) << std::fixed <<
            interval.Min();
        return out << std::setw(10) << std::setprecision(4) << std::fixed <<
            interval.Max() << ']';
    }
};

} // namespace ray
