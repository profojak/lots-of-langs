module;

#include <array>
#include <fstream>
#include <limits>
#include <stdexcept>
#include <string>
#include <vector>

#include <cstdint>

using std::uint8_t;
using std::uint16_t;

export module Image;

class ImageError : public std::logic_error {
public:
    /*! @brief Constructor. */
    ImageError(const std::string& message) : std::logic_error(message) {}
};

export namespace render {

/*! @brief TGA image header. */
#pragma pack(push, 1)
struct Header {
	uint8_t id_length{};
	uint8_t color_map_type{};
	uint8_t data_type_code{};
	uint16_t color_map_origin{};
	uint16_t color_map_length{};
	uint8_t color_map_depth{};
	uint16_t x_origin{};
	uint16_t y_origin{};
	uint16_t width{};
	uint16_t height{};
	uint8_t bits_per_pixel{};
	uint8_t image_descriptor{};
};
#pragma pack(pop)

/*! @brief TGA image pixel. */
struct Pixel {
    /*! @brief Data. */
    std::array<uint8_t, 4> data;

    /*! @brief Default constructor. */
    Pixel() noexcept = default;

    /*! @brief Copy constructor. */
    Pixel(const Pixel&) noexcept = default;

    /*! @brief Move constructor. */
    Pixel(Pixel&&) noexcept = default;

    /*! @brief Destructor. */
    ~Pixel() noexcept = default;

    /**
     * @brief Constructor from components.
     * @param r Red component.
     * @param g Green component.
     * @param b Blue component.
     * @param a Alpha component.
     */
    Pixel(const uint8_t r, const uint8_t g, const uint8_t b,
        const uint8_t a = 255) noexcept : data{r, g, b, a} {}
    
    /*! @brief Copy assignment operator. */
    inline Pixel& operator=(const Pixel&) noexcept = default;

    /*! @brief Move assignment operator. */
    inline Pixel& operator=(Pixel&&) noexcept = default;
};

/*! @brief Image. */
class Image {
private:
    /*! @brief Data. */
    std::vector<uint8_t> data;
    /*! @brief Z-buffer. */
    std::vector<float> z_buffer;
    /*! @brief Width. */
	int width;
    /*! @brief Height. */
	int height;
    /*! @brief Bytes per pixel. */
	uint8_t bytes_per_pixel;

public:
    /*! @brief Format. */
    enum class Format {
		GRAYSCALE = 1, RGB = 3, RGBA = 4
    };

    /*! @brief Default constructor. */
    Image() noexcept = default;

    /*! @brief Copy constructor. */
    Image(const Image&) noexcept = default;

    /*! @brief Move constructor. */
    Image(Image&&) noexcept = default;

    /*! @brief Destructor. */
    ~Image() noexcept = default;

    /**
     * @brief Constructor that accepts width, height and bytes per pixel.
     * @param width Width.
     * @param height Height.
     * @param bytes_per_pixel Bytes per pixel.
     */
    explicit Image(const int width, const int height, const int bytes_per_pixel)
        noexcept : data(width * height * bytes_per_pixel, 0),
        z_buffer(width * height, -std::numeric_limits<float>::max()),
        width(width), height(height), bytes_per_pixel(bytes_per_pixel) {}

    /**
     * @brief Constructor that accepts width, height and format.
     * @param width Width.
     * @param height Height.
     * @param format Format.
     */
    explicit Image(const int width, const int height, const Format format)
        noexcept : Image(width, height, static_cast<int>(format)) {}

    /*! @brief Copy assignment operator. */
    inline Image& operator=(const Image&) noexcept = default;

    /*! @brief Move assignment operator. */
    inline Image& operator=(Image&&) noexcept = default;

    /**
     * @brief Read TGA file.
     * @param filename Filename.
     */
    void ReadTgaFile(const std::string& filename);

    /**
     * @brief Write TGA file.
     * @param filename Filename.
     * @param rle Run-length encoding.
     */
    void WriteTgaFile(const std::string& filename, const bool rle = true) const;

    /**
     * @brief Set pixel.
     * @param x X coordinate.
     * @param y Y coordinate.
     * @param z Z-buffer value.
     * @param pixel Pixel.
     */
    void SetPixel(const int x, const int y, const float z, const Pixel& pixel);

    /**
     * @brief Get pixel.
     * @param x X coordinate.
     * @param y Y coordinate.
     */
    [[nodiscard]] auto GetPixel(const int x, const int y) const -> Pixel;

    /*! @brief Get width. */
    [[nodiscard]] inline auto GetWidth() const noexcept -> int {
        return width;
    }

    /*! @brief Get height. */
    [[nodiscard]] inline auto GetHeight() const noexcept -> int {
        return height;
    }

    /*! @brief Flip horizontally. */
    void FlipHorizontally();

    /*! @brief Flip vertically. */
    void FlipVertically();

private:
    /**
     * @brief Load run-length encoded data.
     * @param in Input file stream.
     */
    void LoadRleData(std::ifstream& in);

    /**
     * @brief Unload run-length encoded data.
     * @param out Output file stream.
     */
    void UnloadRleData(std::ofstream& out) const;
};

} // namespace render
